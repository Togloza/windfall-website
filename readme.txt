This was originally coded to be used in bootstrap studio which required the use of pure javascript. This can be used as a reference for changing the code to another language. This was my first time creating a website and using javascript, so the code may be written poorly and not make sense. 

Canto quickstart guide: https://docs.canto.io/evm-development/quickstart-guide


CONTRACT ADDRESSES:
Testnet:
RPC: https://canto-testnet.plexnode.wtf
Turnstile: 0xe371237E2d8Acf58356b8Da263ad952528CDfd8b
Staking: 0x66c1222813C1BB089277f4496e4314a5E9709610 (DEPRECIATED)
Token: 0x11BB2C7fe36FA74e11EE9DeA936A2faF487694a7 (DEPRECIATED)


Staking Updated: 0xC06940e81e6337344E16d67DDb33dD6144eBe2CE
Token Updated: 0xA631523aC0Aa65dDB8E3a13eBc5B00A66C0CC8d7

Note: The staking contract has a buffer period of 2 minutes for staking to be valid,
and a 24 minute period before you can unstake after starting to unstake. In the actual
contract these will be 2 days and 24 days respectively. 

Extra:
- There is commented code at the bottom which was my attempt to upload the token metadata to my google cloud bucket where it will be hosted. I couldn't get it to work since it needs the Storage object imported from the google-cloud/storage, but this file wouldn't let me use require statements since its not a module or something (forgot the exact name), and I couldn't figure out how to make it one. It would be great if the metadata could be updated and uploaded to the google cloud bucket when the user calls the stake(), startUnstaking(), and unstake() functions. I do have a work around solution by using a python script (included) to update the metadata periodically, but if it can be done on the front end that would be great. 

- Metadata is stored in a uint => string mapping called metadata. The metadata can be retrieved from the contract by calling the getMetadata(uint tokenId) function. 

- The stake function has a return value for the tokenId that is generated, but I couldn't find a way to get the return value on the front end. It may be nice to be able to display that value to the user, since they need it to add their token to their metamask, since metamask, from what I could tell, does not support adding erc721 tokens to a user's account through the front end. 

- A couple notes about the project:
- There is a 2 day period before a staked user is eligible to win rewards. This will be reduced in the testnet deployment to 1 minute so it can be tested easier.
- Likewise, there is 7 day period before users can win the super rewards, which will also be reduced in the testnet deployment to 2 minutes.
- There is a 24 day period for a user to start unstaking their token to when they can actually unstake the token. The cosmos network requres a 21 day unstaking period which is fundimental to the network and cannot be changed. The extra three days is for admin to actuall process these requests. This will be reduced in the testnet deployment to 5 minutes, 
    but the unstake process on the front end should reflect the 24 day process. We can discuss this more. 
- ABI will be provided in another file
- If you need more information about the code for the back end feel free to ask, and if you need functions added to the back end, that can also be arranged. 
- We are planning on adding a lending feature in the future, where users can borrow against their nfts, but it isn't currently ready. 
- This code was written for the previous version of the contract, so some things may be out of date and names changed, refer to the new .figma file provided for any discrepencies. 
- The python files provided are mainly just for reference, could be helpful, may not. stakingContractEventListener.py is a script that updates the metadata periodically, and the factoryContractInfo.py would be used to automate calling the publishWinner function. 
- The RPC url for the mainnet and testnet are different, just keep that in mind. The contract addresses in the code will also point to a different contract, refer to the addresses provided. 
- The staking and token contract interfaces are provided which expose, I believe, all the external/public functions from the contracts. 
- The data from the past winners can be accessed through a call to getPastDataArrays
- I am not too familiar with front end languages, and I am likely the one who will have to make small edits in the future, so I would appreciate approprate comments for the code. 



If you have any questions feel free to ask, I will try to be available as much as possible, but I do live in PST time so depending on the timezone difference, there may be better windows of time to get responses.






Info about the old website if needed. 



HTML: 
The html was generated by using an online figma to html converter. 

The first element in the html is a div called unloadedImages. This element is hidden by default. There was an issue when trying to publish the website using bootstrap studio since two of the images were not uploading since they were unused until a user connected their wallet. This inclusion fixed this issue. 

CSS: 
I don't really know what I am doing when writing CSS, so things are kinda patched together so they work. I couldn't get the website to scale properly when changing the width of the website.  

JS: 
There are two javascript files, preRender.js and index.js. The website was written to work with the previous version of the smart contract, and some of the functions and variables have changed names. Included is an updated version of the ABI, and a deployed contract on Canto testnet can be found at this address: 


preRender.js: 

The purpose of preRender was to load the read only data from the smart contract and change the website text as necessary. It was named preRender since I was trying to render this information before the webpage was displayed, but I was unsuccessful. The page would load its base values then change to the values specified in preRender after a second or two. Even when the script was included in the header instead of the bottom of the body it wasn't working properly. 

The preRender script loads the read only data required by the website including the total Canto staked, winning amounts, and the data from the previous winners. 

The past winners data is stored in two uint arrays of size 7, in the updated code these are winningAmounts and winningToken. Note, the previous contract recorded the winning user's address instead of the token id, but we refactored the code to attribute winnings to the tokens themselves rather than the address of the token holder. Whenever the publishWinner function is called the values of winningAmounts and winningToken arrays get shifted up by one, and the new data is recorded in the vacant 0 index position. These values are added to the recent windfalls section of the website.

The preRender script also controlled the timer on the website. The timer doesn't actually do anything other than reset when it hits zero, since at the moment the winner has to be picked by the admin account every day. This can be automated through a python script. At the moment the recent windfalls section updates whether or not the winner was published, but this could be changed to listen for the event emitted when a winner is chosen: emit WinnerChosen(winningToken, winningAmount);


index.js: 

This script contains the main bulk of the javascript code. 

A quick rundown of the functions:

connectButtonTextToUserAccount
- A function that changes the connect button's text to their wallet address when the connect button is clicked

handleChainChanged
- I believe this was pulled from metamask's documentation and changed to work with Canto network.
- Calls the handleUserNFTs function, since we need to know the user's account before we can load their NFTs.

replaceButtonWithInput
- Changes the deposit button to an input field, called when wallet is connected.

insertOwnedNFTElementHeader
- Inserts the header for the user's owned nft section 

insertOwnedNFTElement
- This function takes in the data of the user's nft as inputs to create a visual representation of that nft. 
- The website scales in length depending on the number of nfts the user holds.
- This also creates an unstake button if the user has passed the 24 day period after starting to unstake their nft. 

insertClaimRewardsElement
- Adds an element that let users claim their rewards
- Refactored the code to reward the tokens themselves instead of their addresses, so this is no longer very relevant.

handleUserNFTs
- Metamask does not have a way to see what tokens a user owns from an erc721 collection, so there is a function called getTokensOfOwner in the token contract which should return an array with the ids of the tokens the address input owns. 
- Fairly gas intensive, so should only be used in a read only function call
- Token owners are updated in an array tokenOwner in the _beforeTokenTransfer function of the erc721 contract, and the getTokensOfOwner loops through this array to find and condense the owned tokens by address. 
- Maybe this should be done afterTokenTransfer instead now that I think about it more.

handleFunctions
- These functions tend to execute the function calls when the approprate buttons are clicked.
- eg. The handleStake function is called when the stake button is clicked and calls the contract stake() function.

showModal
- I was playing around with trying to display transaction data using a modal, and this function just displays the modal with input data
